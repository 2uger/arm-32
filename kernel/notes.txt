// Write down all usefull features of CMSIS and CPU itself
// Maybe some piece of code

Thoughts on locks:
-- Lock in simple way just a mechanism to prevent multiple threads 
    take the same structure to avoid miss read
    (looping over array to find demanding buffer, when find it 
    (other thread take this buffer and change information => phhhh)
-- Make a lock as simple flag to represent is struct using by someone
-- When acquire lock => remove interrupts
    (it's more about interrupt
    (because only after them we will switch to another thread)
    and just update lock counter;
-- When release, make the same but update lock counter in another way

-- IMPORTANT: Think about test and set mechanism, it works on multicores system
    what it means is that it avoid race condition withoud dealing with interrupts,
    so in our case dealing with one core system, we could use this mechanism without
    disabling interrupting.

-- Make simple spin lock for first time, as we gonna use preemtive scheduling we dont care
    about going into endless loop


File System:

* Basic structure:
 --SB--Logs--Inodes--BitMap(freeblock)--Data(blocks)

* Start from simple cache buffer, think about disk as road with defined block size
  As kernel developer you can read only actually block, not bits.
  It's only about making reading faster.

* Inodes is indeed objects of files, directories, devices. 
  Got an array of themselves in memory, work most of time with them, not actually with disk
  Inodes tracking all data blocks that they use
  Work with references from others threads(think about it!!!)

  On different levels you work with different abstractions, think about inodes as something
  as you using in your code and dont give a damn about how they gonna read blocks from disk
